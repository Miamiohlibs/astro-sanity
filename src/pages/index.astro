---
import { sanityClient } from "sanity:client";
import Layout from '../layouts/Layout.astro';
import Card from '../components/Card.astro';
import Searchbox from '../components/Searchbox.astro';
import Carousel from '../components/Carousel.astro';
import LibraryHours from '../components/LibraryHours.astro';
import Localist from '../components/Localist.astro';

export const prerender = true;

const posts = await sanityClient.fetch(
`*[_type == "post" && defined(date)] | order(date desc)`,
)

---
<Layout title="Welcome to Miami University Libraries">

	<main>
<div class="home container-fluid">
  

  <div class="d-flex flex-column-reverse flex-lg-row px-0">
    <!-- Hours Box -->
    <div class="col-12 col-lg-3 bg-lesswhite align-items-center px-5 pt-4">
    
        <LibraryHours />
    
      </div>
    </div>

    <div class="col-12 col-lg-9 d-flex justify-content-center ps-lg-5 align-items-center">
      
        <Searchbox />
        
    </div>
  </div>

<Carousel />

  <!-- Mid part of homepage, contains three columns -->

  <div class="col-12 module-divid stripe-divid">
  </div>

  <div class="container-fluid">
    <div class="row">

      <!-- Events Box -->
      <div class="col-lg-4 col-md-7 col-sm-12 mx-auto" id="homepageCalendar">
       
<Localist />

      </div>



      <!-- News Box -->
      <div class="col-lg-8 col-md-5 col-sm-12 bg-lesswhite">
        
        <h1 class="h1Homepage">News Spotlight</h1>
           
    <ul role="list" class="link-card-grid">
        {
        posts.map((post: any) => (
            <Card href={'/posts/' + post.slug.current} title={post.title} body={post.excerpt} />
        ))
        }
    </ul>

      </div>

    </div>
  </div>
	</main>
</Layout>


  <script is:inline>
    $(document).ready(function () {
      console.log('Attempting to update tweet titles');
      setTimeout(function () {
        /*
          Re-write the tweet title attributes to something unique and sequential
          Was "Twitter Tweet", now more like: "Tweet 1 of 4"
          This is done with a timeout because something in the Twitter API likes to re-write the title, and we need to make our change after it does.
        */
        let numTweets = $('.jekyll-twitter-plugin iframe').length;
        let i = 1;
        $('.jekyll-twitter-plugin iframe').each(function () {
          let newTitle = 'Tweet ' + i + ' of ' + numTweets;
          console.log('Attempting to apply:', newTitle)
          $(this).attr('title', newTitle);
          i++;
        });
        // Add role=presentation to custom google search tables after 1s.
        $('table.gsc-search-box')[0].setAttribute('role', 'presentation');
        $('table#gs_id50')[0].setAttribute('role', 'presentation');
        $('table#gs_id50')[0].setAttribute('placeholder', 'search');
        $('table#gs_id50')[0].setAttribute('aria-label', 'search');
      }, 2000);

      setTimeout(function () {
      if ($('#s-lg-widget-1584468485612')[0].innerText === "") {
        console.log('Ready to close the Emergency Message box');
        $('#s-lg-widget-1584468485612 ~ button').click(); // close the front page alert message box when it's not in used.
      } }, 2000);

      $('p.alert-danger').css('color', 'dodgerblue');
      $('.localist_minicalendar_page_heading h1').click(function () {
        $(this).each(function () {
          cal_id = $(this).attr('id');
          cal_html = $(this).html();
          $(this).replaceWith('<h2 class="localist_headermod">Test</h2>');
          $(".localist_headermod").attr('id', cal_id).html(cal_html);
        });
      });
      $('.localist_minicalendar_page_heading h1').click();

      $('#unfoldedCard').css("border", "1px solid rgba(0, 0, 0, 0.125)");

      $(".hideOnHomepage").css("display", "none");

      $('#localist-widget-49156984 table')[0].setAttribute("role", "presentation");

      var today = new Date();
      var dd = String(today.getDate()).padStart(2, '0');
      var mm = String(today.getMonth() + 1).padStart(2, '0');
      var yyyy = today.getFullYear();
      today = mm + '/' + dd + '/' + yyyy;
      $('.todays-date').append(today);

      if ((parseInt(dd) > 8) && (parseInt(mm) == 12) || (parseInt(dd) < 26) && (parseInt(mm) == 1)) {
        $('li.nocontent > div.lw_event_item_title')[0].innerHTML = 'Happy Holidays! We\'ll see you in the next semester!';
        $('#localist-widget-49156984 ~ div').addClass('visually-hidden');

        $('table.localist_minicalendar_minicalendar td').click(function () {
          setTimeout(function () {
            $('li.nocontent > div.lw_event_item_title')[0].innerHTML = 'Happy Holidays! We\'ll see you in the next semester!';
          }, 500)
        });
      }

    });
  </script>

<style>
	:root {
		--astro-gradient: linear-gradient(0deg, #4f39fa, #da62c4);
	}

	h1 {
		font-size: 3em;
		margin: 2rem 0 1rem 0;
	}

	main {
		margin: auto;
		padding: 1em;
	}

	.text-gradient {
		font-weight: 900;
		background-image: var(--astro-gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-size: 100% 200%;
		background-position-y: 100%;
		border-radius: 0.4rem;
		animation: pulse 4s ease-in-out infinite;
	}

	@keyframes pulse {
		0%,
		100% {
			background-position-y: 0%;
		}
		50% {
			background-position-y: 80%;
		}
	}

	.instructions {
		line-height: 1.6;
		margin: 1rem 0;
		background: #4f39fa;
		padding: 1rem;
		border-radius: 0.4rem;
		color: var(--color-bg);
	}

	.instructions code {
		font-size: 0.875em;
		border: 0.1em solid var(--color-border);
		border-radius: 4px;
		padding: 0.15em 0.25em;
	}

	.link-card-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
		gap: 1rem;
		padding: 0;
	}

	.latest-posts {
		border: 0.15em solid var(--color-border);
		border-radius: 0.4rem;
		padding: 1em 2em;
		background-color: white;
	}
</style>
